import 'dart:io';
import 'package:flutter/services.dart';
import 'package:path/path.dart';
import 'package:sqflite/sqflite.dart';
import 'package:flutter/foundation.dart';
import '../models/historical_figure.dart';
import '../models/user_model.dart';

class DBHelper {
  // ================== SINGLETON ==================
  DBHelper._privateConstructor();
  static final DBHelper instance = DBHelper._privateConstructor();

  static Database? _db;
  static const _dbName = "in_old_days.db";
  // ‚úÖ TƒÉng version l√™n 16 ƒë·ªÉ ƒë·∫£m b·∫£o c√°c thay ƒë·ªïi schema (th√™m role/avatar_url) ƒë∆∞·ª£c √°p d·ª•ng
  static const _dbVersion = 23;

  // ================== INITIALIZATION ==================
  static Future<void> prepareDatabaseFromAssets() async {
    try {
      if (_db != null && _db!.isOpen) await _db!.close();
      _db = await _initDB();
      debugPrint("‚úÖ DB kh·ªüi t·∫°o th√†nh c√¥ng!");
    } catch (e, st) {
      debugPrint("‚ùå L·ªói init DB: $e");
      debugPrintStack(stackTrace: st);
      rethrow;
    }
  }

  static Future<Database> get database async {
    if (_db != null && _db!.isOpen) return _db!;
    _db = await _initDB();
    return _db!;
  }

  static Future<Database> _initDB() async {
    final dbDir = await getDatabasesPath();
    final path = join(dbDir, _dbName);
    final file = File(path);

    // Bi·∫øn ki·ªÉm tra xem c√≥ c·∫ßn force copy kh√¥ng
    bool shouldForceCopy = false;

    if (!(await file.exists())) {
      debugPrint("‚è≥ Copy DB l·∫ßn ƒë·∫ßu...");
      shouldForceCopy = true; // L·∫ßn ƒë·∫ßu th√¨ ph·∫£i copy
    } else {
      // Ki·ªÉm tra version hi·ªán t·∫°i c·ªßa DB
      try {
        Database tempDb = await openReadOnlyDatabase(path);
        final oldVersion = await tempDb.getVersion();
        await tempDb.close();

        if (oldVersion < _dbVersion) {
          debugPrint("‚ö° Upgrade DB $oldVersion ‚Üí $_dbVersion");
          // N·∫øu phi√™n b·∫£n c≈© h∆°n, ta th·ª±c hi·ªán force copy ƒë·ªÉ √°p d·ª•ng c√°c thay ƒë·ªïi trong file DB assets
          // HO·∫∂C logic onUpgrade s·∫Ω ch·∫°y.
          // Ta T·∫ÆT force copy ·ªü ƒë√¢y v√† TIN T∆Ø·ªûNG v√†o onUpgrade ƒë·ªÉ gi·ªØ d·ªØ li·ªáu c≈© (n·∫øu c√≥).
          // N·∫øu b·∫°n mu·ªën L√ÄM M·ªöI DATABASE M·ªñI KHI TƒÇNG VERSION, h√£y b·ªè comment d√≤ng d∆∞·ªõi:
          // shouldForceCopy = true;
        }
      } catch (e) {
        debugPrint("‚ö†Ô∏è L·ªói ƒë·ªçc DB: $e ‚Üí copy l·∫°i t·ª´ assets ƒë·ªÉ s·ª≠a l·ªói");
        shouldForceCopy = true;
      }
    }

    if (shouldForceCopy) {
      await _copyDBFromAssets(path, force: true);
    }

    // M·ªü DB v·ªõi onCreate/onUpgrade
    return await openDatabase(
      path,
      version: _dbVersion,
      onCreate: _onCreate,
      onOpen: (db) async {
        // Sau khi DB ƒë∆∞·ª£c m·ªü, ta ch·∫°y l·∫°i logic ki·ªÉm tra c·ªôt, ƒë·ªÅ ph√≤ng onUpgrade b·ªã miss.
        await _checkUserTableColumns(db);
        await _syncEventsWithLocations(db);
      },
      onUpgrade: (db, oldV, newV) async {
        debugPrint("‚ú® [onUpgrade] C·∫≠p nh·∫≠t schema n·∫øu c·∫ßn ($oldV ‚Üí $newV)");

        // Lu√¥n ch·∫°y an to√†n c√°c l·∫ßn n√¢ng c·∫•p tr∆∞·ªõc
        if (oldV < 15) {
          await _safeAddColumn(db, 'users', 'full_name', 'TEXT');
          await _safeAddColumn(db, 'users', 'created_at', 'TEXT');
          await _safeAddColumn(db, 'users', 'updated_at', 'TEXT');
        }

        // üî¥ LOGIC TH√äM CHO VERSION 16: Th√™m role v√† avatar_url
        if (oldV < 16) {
          await _safeAddColumn(db, 'users', 'avatar_url', 'TEXT');
          // C·ªôt role c√≥ th·ªÉ g√¢y l·ªói mismatch, ta th√™m n√≥ v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh (DEFAULT 1)
          // n·∫øu c∆° s·ªü d·ªØ li·ªáu cho ph√©p (SQLite kh√¥ng th·ª±c s·ª± c·∫ßn ki·ªÉu TEXT/INTEGER cho ph√©p NULL)
          // ƒê·ªÉ tr√°nh l·ªói datatype mismatch, ta d√πng INTEGER v·ªõi DEFAULT 1 (user th∆∞·ªùng)
          await _safeAddColumn(db, 'users', 'role', 'INTEGER DEFAULT 1');
        }
      },
      onDowngrade: onDatabaseDowngradeDelete,
    );
  }

  // Helper ƒë·ªÉ th√™m c·ªôt m·ªôt c√°ch an to√†n
  static Future<void> _safeAddColumn(Database db, String tableName, String columnName, String columnType) async {
    try {
      final cols = await db.rawQuery("PRAGMA table_info($tableName)");
      final colNames = cols.map((c) => c['name'].toString()).toList();
      if (!colNames.contains(columnName)) {
        await db.execute("ALTER TABLE $tableName ADD COLUMN $columnName $columnType;");
        debugPrint("‚úÖ Th√™m c·ªôt '$columnName' v√†o b·∫£ng '$tableName'");
      }
    } catch (e) {
      debugPrint("‚ö†Ô∏è L·ªói khi th√™m c·ªôt '$columnName' v√†o '$tableName': $e");
    }
  }

  static Future<void> _copyDBFromAssets(String path, {bool force = false}) async {
    final file = File(path);
    if (force && await file.exists()) {
      await file.delete(recursive: true);
      debugPrint("üîÑ Xo√° DB c≈©, copy l·∫°i t·ª´ assets...");
    }

    // ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i tr∆∞·ªõc khi ghi file
    await Directory(dirname(path)).create(recursive: true);

    ByteData data = await rootBundle.load("assets/$_dbName");
    final bytes = data.buffer.asUint8List(data.offsetInBytes, data.lengthInBytes);
    await file.writeAsBytes(bytes, flush: true);
    debugPrint("‚úÖ Copy DB v√†o $path");
  }

  // ================== CREATION ==================
  static Future<void> _onCreate(Database db, int version) async {
    debugPrint("üß± [onCreate] T·∫°o b·∫£ng m·ªõi...");

    // üî¥ ƒê√É S·ª¨A: Thay 'id' th√†nh 'user_id' v√† TH√äM 'avatar_url' v√† 'role' ƒë·ªÉ ƒë·ªìng b·ªô
    await db.execute('''
      CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE NOT NULL,
        email TEXT UNIQUE NOT NULL,
        password_hash TEXT NOT NULL,
        full_name TEXT, 
        avatar_url TEXT, 
        role INTEGER DEFAULT 1, 
        created_at TEXT,
        updated_at TEXT
      );
    ''');

    // ... (Gi·ªØ nguy√™n c√°c b·∫£ng kh√°c)

    await db.execute('''
      CREATE TABLE IF NOT EXISTS locations (
        location_id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        region TEXT,
        latitude REAL,
        longitude REAL
      );
    ''');

    await db.execute('''
      CREATE TABLE IF NOT EXISTS events (
        event_id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT,
        description TEXT,
        date TEXT,
        year INTEGER,
        location_id INTEGER,
        image_url TEXT,
        source TEXT,
        locationName TEXT,
        FOREIGN KEY (location_id) REFERENCES locations(location_id)
      );
    ''');

    await db.execute('''
      CREATE TABLE IF NOT EXISTS historical_figures (
        figure_id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL UNIQUE,
        description TEXT,
        dob TEXT,
        dod TEXT,
        image_url TEXT
      );
    ''');

    await db.execute('''
      CREATE TABLE IF NOT EXISTS event_figures (
        event_id INTEGER NOT NULL,
        figure_id INTEGER NOT NULL,
        PRIMARY KEY (event_id, figure_id),
        FOREIGN KEY (event_id) REFERENCES events(event_id) ON DELETE CASCADE,
        FOREIGN KEY (figure_id) REFERENCES historical_figures(figure_id) ON DELETE CASCADE
      );
    ''');

    await db.execute('''
      CREATE TABLE IF NOT EXISTS favorites (
        favorite_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        event_id INTEGER,
        created_at TEXT
      );
    ''');
  }

  static Future<void> _checkUserTableColumns(Database db) async {
    try {
      final cols = await db.rawQuery("PRAGMA table_info(users)");
      final colNames = cols.map((c) => c['name'].toString()).toList();
      // ƒê·∫£m b·∫£o c√°c c·ªôt c·∫ßn thi·∫øt cho phi√™n b·∫£n m·ªõi c√≥ s·∫µn
      if (!colNames.contains('full_name')) {
        await db.execute("ALTER TABLE users ADD COLUMN full_name TEXT;");
      }
      if (!colNames.contains('created_at')) {
        await db.execute("ALTER TABLE users ADD COLUMN created_at TEXT;");
      }
      if (!colNames.contains('updated_at')) {
        await db.execute("ALTER TABLE users ADD COLUMN updated_at TEXT;");
      }
      // üî¥ TH√äM KI·ªÇM TRA CHO C√ÅC C·ªòT M·ªöI: avatar_url v√† role
      if (!colNames.contains('avatar_url')) {
        await db.execute("ALTER TABLE users ADD COLUMN avatar_url TEXT;");
      }
      if (!colNames.contains('role')) {
        await db.execute("ALTER TABLE users ADD COLUMN role INTEGER DEFAULT 1;");
      }
    } catch (e) {
      debugPrint("‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra b·∫£ng users: $e");
    }
  }

  // ================== CRUD ==================
  static Future<List<Map<String, dynamic>>> rawQuery(String sql, [List<Object?>? args]) async {
    final db = await database;
    return await db.rawQuery(sql, args);
  }

  static Future<int> insert(String table, Map<String, dynamic> values) async {
    final db = await database;
    return await db.insert(table, values);
  }

  // ================== USERS ==================
  static Future<Map<String, dynamic>?> authenticateUser(String email, String password) async {
    final db = await database;
    // üî¥ L∆ØU √ù: N·∫øu t√™n b·∫£ng c≈© l√† 'users_id', b·∫°n c·∫ßn ƒë·ªïi th√†nh 'users' trong code,
    // ho·∫∑c ƒë·ªïi t√™n b·∫£ng trong DB assets/onCreate. T√¥i s·ª≠a l·∫°i th√†nh 'users' theo logic chung.
    final res = await db.rawQuery(
      "SELECT * FROM users WHERE email = ? AND password_hash = ? LIMIT 1",
      [email, password],
    );
    // Tr·∫£ v·ªÅ Map<String, dynamic> ch·ª©a t·∫•t c·∫£ th√¥ng tin ng∆∞·ªùi d√πng
    return res.isNotEmpty ? res.first : null;
  }

  static Future<Map<String, dynamic>?> getUserByEmail(String email) async {
    final db = await database;
    // üî¥ L∆ØU √ù: T√™n b·∫£ng ·ªü ƒë√¢y c≈©ng ƒë∆∞·ª£c s·ª≠a th√†nh 'users'
    final res = await db.query('users', where: 'email = ?', whereArgs: [email], limit: 1);
    return res.isNotEmpty ? res.first : null;
  }
  static Future<UserModel?> getUserById(int userId) async {
    final db = await database;
    final res = await db.query(
      'users', // ‚úÖ ƒê·ªïi t·ª´ userTable sang chu·ªói 'users'
      where: 'user_id = ?',
      whereArgs: [userId],
      limit: 1,
    );

    if (res.isNotEmpty) {
      return UserModel.fromMap(res.first);
    }
    return null;
  }

  /// C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng trong b·∫£ng `users`
  static Future<int> updateUser(UserModel user) async {
    final db = await database;

    // ‚úÖ D√πng toDbMap() ƒë·ªÉ chuy·ªÉn ƒë√∫ng ƒë·ªãnh d·∫°ng c·ªôt DB
    final data = user.toDbMap();

    // ‚öôÔ∏è Lo·∫°i b·ªè c√°c gi√° tr·ªã null (tr√°nh override c·ªôt b·∫±ng null)
    data.removeWhere((key, value) => value == null);

    // ‚úÖ Th·ª±c hi·ªán update theo user_id
    return await db.update(
      'users',
      data,
      where: 'user_id = ?',
      whereArgs: [user.id],
      conflictAlgorithm: ConflictAlgorithm.replace, // ƒë·∫£m b·∫£o kh√¥ng l·ªói ghi ƒë√®
    );
  }

  // ... (Gi·ªØ nguy√™n c√°c h√†m kh√°c)
  // ================== EVENTS ==================
  static Future<List<Map<String, dynamic>>> getAllEvents() async {
    final db = await database;
    return await db.rawQuery('''
      SELECT e.*, l.latitude, l.longitude, l.name AS location_name, l.region
      FROM events e
      LEFT JOIN locations l ON e.location_id = l.location_id
      ORDER BY e.date ASC
    ''');
  }

  static Future<Map<String, dynamic>?> getEventById(int id) async {
    final db = await database;
    final res = await db.rawQuery('''
      SELECT e.*, l.latitude, l.longitude, l.name AS location_name, l.region
      FROM events e
      LEFT JOIN locations l ON e.location_id = l.location_id
      WHERE e.event_id = ?
    ''', [id]);
    return res.isNotEmpty ? res.first : null;
  }

  static Future<List<Map<String, dynamic>>> eventsOfYear(int year) async {
    final db = await database;
    return await db.rawQuery('''
      SELECT e.*, l.latitude, l.longitude, l.name AS location_name, l.region
      FROM events e
      LEFT JOIN locations l ON e.location_id = l.location_id
      WHERE e.year = ? 
      ORDER BY e.date ASC
    ''', [year]);
  }

  static Future<List<Map<String, dynamic>>> eventsOfMonth(int year, int month) async {
    final db = await database;
    final start = "$year-${month.toString().padLeft(2, '0')}-01";
    final nextMonth = month == 12 ? 1 : month + 1;
    final nextYear = month == 12 ? year + 1 : year;
    final end = "$nextYear-${nextMonth.toString().padLeft(2, '0')}-01";

    return await db.rawQuery(
      '''
      SELECT e.*, l.latitude, l.longitude, l.name AS location_name, l.region
      FROM events e
      LEFT JOIN locations l ON e.location_id = l.location_id
      WHERE date(e.date) >= ? AND date(e.date) < ? 
      ORDER BY e.date ASC
      ''',
      [start, end],
    );
  }

  // H√†m ch√≠nh ƒë·ªÉ l·∫•y s·ª± ki·ªán theo ID nh√¢n v·∫≠t
  static Future<List<Map<String, dynamic>>> getEventsByFigureId(int figureId) async {
    final db = await database;
    return await db.rawQuery('''
      SELECT e.*, l.latitude, l.longitude, l.name AS location_name, l.region
      FROM events e
      JOIN event_figures ef ON e.event_id = ef.event_id
      LEFT JOIN locations l ON e.location_id = l.location_id
      WHERE ef.figure_id = ?
      ORDER BY e.date DESC
    ''', [figureId]);
  }

  // ================== FIGURES ==================
  static Future<List<HistoricalFigure>> getAllFigures() async {
    final db = await database;
    final maps = await db.query('historical_figures', orderBy: 'name ASC');
    return maps.map((m) => HistoricalFigure.fromMap(m)).toList();
  }

  // ================== FAVORITES ==================
  // üí° ƒê√É S·ª¨A: Y√™u c·∫ßu userId b·∫Øt bu·ªôc v√† lo·∫°i b·ªè '?? 1'
  static Future<void> addFavorite(int eventId, {required int userId}) async {
    final db = await database;
    await db.insert(
      'favorites',
      {'user_id': userId, 'event_id': eventId, 'created_at': DateTime.now().toIso8601String()},
      conflictAlgorithm: ConflictAlgorithm.ignore,
    );
  }

  // üí° ƒê√É S·ª¨A: Y√™u c·∫ßu userId b·∫Øt bu·ªôc v√† lo·∫°i b·ªè '?? 1'
  static Future<void> removeFavorite(int eventId, {required int userId}) async {
    final db = await database;
    await db.delete('favorites', where: 'event_id = ? AND user_id = ?', whereArgs: [eventId, userId]);
  }

  // üí° ƒê√É S·ª¨A: Y√™u c·∫ßu userId b·∫Øt bu·ªôc v√† lo·∫°i b·ªè '?? 1'
  static Future<bool> isFavorite(int eventId, {required int userId}) async {
    final db = await database;
    final res = await db.query('favorites', where: 'event_id = ? AND user_id = ?', whereArgs: [eventId, userId]);
    return res.isNotEmpty;
  }

  // üí° ƒê√É S·ª¨A: Y√™u c·∫ßu userId b·∫Øt bu·ªôc v√† lo·∫°i b·ªè '?? 1'
  static Future<List<Map<String, dynamic>>> getFavoriteEvents({required int userId}) async {
    final db = await database;
    return await db.rawQuery('''
      SELECT e.*, f.created_at AS favorited_at
      FROM favorites f
      JOIN events e ON f.event_id = e.event_id
      WHERE f.user_id = ?
      ORDER BY f.created_at DESC
    ''', [userId]);
  }

  // H√†m l·∫•y ID s·ª± ki·ªán y√™u th√≠ch
  static Future<List<int>> getUserFavoriteIds({required int userId}) async {
    final db = await database;
    final res = await db.query('favorites', columns: ['event_id'], where: 'user_id = ?', whereArgs: [userId]);
    // Tr·∫£ v·ªÅ danh s√°ch c√°c event_id (int)
    return res.map((m) => m['event_id'] as int).toList();
  }


  // ================== UTILITIES ==================

  static Future<void> debugPrintAllImages() async {
    final db = await database;
    final res = await db.rawQuery("SELECT event_id, image_url FROM events LIMIT 378");
    for (var row in res) {
      debugPrint("üì∑ Event ${row['event_id']}: ${row['image_url']}");
    }
  }

  static Future<void> debugCheckFigureEvents(int figureId) async {
    final db = await database;

    // 1. Ki·ªÉm tra ID nh√¢n v·∫≠t c√≥ t·ªìn t·∫°i kh√¥ng
    final figureResult = await db.query('historical_figures', where: 'figure_id = ?', whereArgs: [figureId]);
    if (figureResult.isEmpty) {
      debugPrint('üö® DB DEBUG ($figureId): Nh√¢n v·∫≠t (figure_id=$figureId) KH√îNG T·ªíN T·∫†I trong b·∫£ng historical_figures.');
      return;
    }
    debugPrint('‚úÖ DB DEBUG ($figureId): Nh√¢n v·∫≠t "${figureResult.first['name']}" (ID=$figureId) ƒê√É T·ªíN T·∫†I.');

    // 2. Ki·ªÉm tra li√™n k·∫øt trong b·∫£ng trung gian (event_figures)
    final totalLinks = await db.query('event_figures', where: 'figure_id = ?', whereArgs: [figureId]);
    debugPrint('üîó DB DEBUG ($figureId): S·ªë l∆∞·ª£ng li√™n k·∫øt t√¨m th·∫•y trong event_figures: ${totalLinks.length}');

    if (totalLinks.isEmpty) {
      debugPrint('‚ùå DB DEBUG ($figureId): KH√îNG C√ì li√™n k·∫øt n√†o trong b·∫£ng event_figures. V·∫•n ƒë·ªÅ n·∫±m ·ªü D·ªÆ LI·ªÜU C·ª¶A FILE DB G·ªêC.');
      return;
    }

    // 3. Ki·ªÉm tra k·∫øt qu·∫£ truy v·∫•n cu·ªëi c√πng (h√†m ch√≠nh)
    final results = await getEventsByFigureId(figureId);
    debugPrint('üîé DB DEBUG ($figureId): K·∫øt qu·∫£ truy v·∫•n getEventsByFigureId(): ${results.length} s·ª± ki·ªán.');

    if (results.isNotEmpty) {
      debugPrint('üéâ DB DEBUG ($figureId): ƒê√£ t√¨m th·∫•y s·ª± ki·ªán, ch√∫ng s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã!');
    } else {
      debugPrint('‚ö†Ô∏è DB DEBUG ($figureId): Tr∆∞y v·∫•n ch√≠nh b·ªã r·ªóng d√π c√≥ li√™n k·∫øt. C√≥ th·ªÉ event_id trong event_figures kh√¥ng t·ªìn t·∫°i trong b·∫£ng events.');
    }
  }

  static Future<void> _syncEventsWithLocations(Database db) async {
    try {
      await db.execute('''
        UPDATE events 
        SET location_id = (
          SELECT l.location_id FROM locations l
          WHERE l.name = events.locationName
        )
        WHERE locationName IS NOT NULL
          AND EXISTS (SELECT 1 FROM locations l WHERE l.name = events.locationName);
      ''');
      debugPrint("üîó ƒê·ªìng b·ªô events.location_id ho√†n t·∫•t");
    } catch (e) {
      debugPrint("‚ö†Ô∏è L·ªói sync events & locations: $e");
    }
  }

  // ================== USERS (EXTENSIONS) ==================
  static Future<List<UserModel>> getAllUsers() async {
    final db = await database;
    final res = await db.query('users');
    return res.map((row) => UserModel.fromMap(row)).toList();
  }

  // ================== ALIASES ==================
  static Future<List<Map<String, dynamic>>> getEventsByYear(int year) => eventsOfYear(year);
  static Future<List<Map<String, dynamic>>> getEventsByMonth(int year, int month) => eventsOfMonth(year, month);
}