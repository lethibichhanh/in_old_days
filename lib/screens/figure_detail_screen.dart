// lib/screens/figure_detail_screen.dart

import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:flutter/services.dart'; // üåü C·∫¶N TH√äM D√íNG N√ÄY ƒê·ªÇ D√ôNG rootBundle
import '../db/db_helper.dart';
import '../models/historical_figure.dart';
import 'event_detail_screen.dart';
import '../l10n/app_localizations.dart';

// --- Khai b√°o m√†u s·∫Øc Pastel T∆∞∆°i s√°ng (ƒê·ªìng b·ªô) ---
const Color kPrimaryColor = Color(0xFF81C784); // Xanh Mint Nh·∫π (Light Mint)
const Color kAppBarColor = Color(0xFF4DB6AC); // Xanh Mint ƒê·∫≠m h∆°n
const Color kAccentColor = Color(0xFFFFAB91); // H·ªìng ƒê√†o/Coral Nh·∫°t
const Color kBackgroundColor = Color(0xFFF9F9F9); // N·ªÅn tr·∫Øng ng√†
const Color kCardColor = Colors.white;
const Color kTitleTextColor = Color(0xFF424242); // X√°m ƒêen Nh·∫π
const Color kSubtextColor = Color(0xFF9E9E9E); // X√°m R·∫•t Nh·∫π


// üåü CHUY·ªÇN SANG STATEFULWIDGET
class FigureDetailScreen extends StatefulWidget {
  final HistoricalFigure figure;
  final int? userId;

  const FigureDetailScreen({super.key, required this.figure, this.userId});

  @override
  State<FigureDetailScreen> createState() => _FigureDetailScreenState();
}

class _FigureDetailScreenState extends State<FigureDetailScreen> {

  // ================== LOGIC X·ª¨ L√ù ·∫¢NH (ASSET & NETWORK) ==================

  // H√†m ti·ªán √≠ch: Ki·ªÉm tra xem t·ªáp asset c√≥ t·ªìn t·∫°i hay kh√¥ng
  Future<String?> _tryLoadAsset(List<String> candidates) async {
    for (var path in candidates) {
      try {
        await rootBundle.load(path);
        return path;
      } catch (_) {}
    }
    return null;
  }

  // H√†m ti·ªán √≠ch: X√¢y d·ª±ng widget ·∫£nh s·ª± ki·ªán, x·ª≠ l√Ω c·∫£ URL M·∫°ng v√† Asset c·ª•c b·ªô
  Widget _buildEventImageWidget(String? imageUrl) {
    if (imageUrl == null || imageUrl.trim().isEmpty) {
      // N·∫øu kh√¥ng c√≥ URL ·∫£nh, tr·∫£ v·ªÅ Icon s·ª± ki·ªán m·∫∑c ƒë·ªãnh
      return const Icon(Icons.event, size: 30, color: kPrimaryColor);
    }

    String path = imageUrl.replaceAll("\\", "/");
    final bool isNetwork = path.startsWith('http://') || path.startsWith('https://');

    // K√≠ch th∆∞·ªõc c·ªë ƒë·ªãnh cho ListTile.leading
    const double size = 50;

    if (isNetwork) {
      // T·∫£i ·∫£nh M·∫†NG
      return Image.network(
        path,
        width: size,
        height: size,
        fit: BoxFit.cover,
        errorBuilder: (_, __, ___) =>
        const Icon(Icons.image_not_supported, size: 30, color: kAccentColor), // L·ªói t·∫£i m·∫°ng
      );
    } else {
      // T·∫£i ·∫£nh ASSET (C·ª•c b·ªô)
      String assetPath = path.replaceAll('-', '_');
      if (!assetPath.startsWith('assets/')) {
        assetPath = 'assets/Image/$assetPath';
      }

      List<String> candidates = [];
      if (assetPath.endsWith(".png") || assetPath.endsWith(".jpg")) {
        candidates.add(assetPath);
      } else {
        candidates.add("$assetPath.png");
        candidates.add("$assetPath.jpg");
      }

      return FutureBuilder<String?>(
        future: _tryLoadAsset(candidates),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: SizedBox(width: 20, height: 20, child: CircularProgressIndicator(color: kPrimaryColor, strokeWidth: 2)));
          }
          if (snapshot.hasData && snapshot.data != null) {
            return Image.asset(
              snapshot.data!,
              width: size,
              height: size,
              fit: BoxFit.cover,
              errorBuilder: (_, __, ___) =>
              const Icon(Icons.broken_image, size: 30, color: kAccentColor), // L·ªói t·∫£i asset
            );
          }
          return const Icon(Icons.image_not_supported, size: 30, color: kAccentColor); // Kh√¥ng t√¨m th·∫•y asset
        },
      );
    }
  }

  // ================== H√ÄM BUILD ==================

  @override
  Widget build(BuildContext context) {
    // üåü TRUY C·∫¨P figure V√Ä userId TH√îNG QUA widget.
    final figure = widget.figure;
    final userId = widget.userId;

    // ‚úÖ TRUY C·∫¨P LOCALIZATIONS
    final tr = AppLocalizations.of(context)!;

    // ‚úÖ KHAI B√ÅO C√ÅC CHU·ªñI D·ªäCH
    final noDescription = tr.translate('no_description');
    final eventRelated = tr.translate('figure_event_related');
    final errorLoadEvent = tr.translate('figure_error_load_event');
    final noRelatedEvent = tr.translate('figure_no_related_event');
    final noTitle = tr.translate('no_title');
    final dateformat = tr.locale.languageCode == 'vi' ? 'dd/MM/yyyy' : 'MM/dd/yyyy';

    // üåü X·ª¨ L√ù CHU·ªñI lifeSpan: T√°ch ng√†y sinh v√† ng√†y m·∫•t, thay th·∫ø '-' b·∫±ng '/'
    String formattedLifeSpan = '';
    if (figure.lifeSpan.isNotEmpty) {
      // T√°ch chu·ªói theo separator " - "
      final parts = figure.lifeSpan.split(' - ');

      final formattedParts = parts.map((part) {
        // Thay th·∫ø t·∫•t c·∫£ '-' trong m·ªói ph·∫ßn (DD-MM-YYYY) b·∫±ng '/'
        return part.trim().replaceAll('-', '/');
      }).toList();

      // N·ªëi l·∫°i c√°c ph·∫ßn ƒë√£ ƒë·ªãnh d·∫°ng b·∫±ng separator " - "
      formattedLifeSpan = formattedParts.join(' - ');
    }
    // Chu·ªói formattedLifeSpan s·∫Ω l√†: "13/03/1884 - 04/04/1978"

    return Scaffold(
      backgroundColor: kBackgroundColor,
      appBar: AppBar(
        title: Text(
          figure.name,
          style: const TextStyle(fontWeight: FontWeight.bold, color: Colors.white),
        ),
        backgroundColor: kAppBarColor, // M√†u Mint ƒë·∫≠m
        foregroundColor: Colors.white,
        elevation: 0,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // üñºÔ∏è ·∫¢nh nh√¢n v·∫≠t (Gi·ªØ nguy√™n logic)
            if (figure.imageUrl != null && figure.imageUrl!.isNotEmpty)
              Center(
                child: Container(
                  constraints: const BoxConstraints(maxHeight: 280), // Gi·ªõi h·∫°n chi·ªÅu cao
                  decoration: BoxDecoration(
                    color: kCardColor, // N·ªÅn tr·∫Øng cho ·∫£nh contain
                    borderRadius: BorderRadius.circular(20),
                    boxShadow: [
                      BoxShadow(
                        color: kPrimaryColor.withOpacity(0.3),
                        blurRadius: 10,
                        offset: const Offset(0, 5),
                      ),
                    ],
                  ),
                  child: ClipRRect(
                    borderRadius: BorderRadius.circular(20),
                    child: Image.network(
                      figure.imageUrl!,
                      // Chi·ªÅu cao t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh theo ·∫£nh, t·ªëi ƒëa 280
                      height: 280,
                      width: double.infinity,
                      fit: BoxFit.contain, // ‚úÖ KH√îNG C·∫ÆT ·∫¢NH
                      errorBuilder: (_, __, ___) => const SizedBox(
                        height: 200,
                        child: Center(
                          child: Icon(Icons.broken_image, size: 50, color: kSubtextColor),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            const SizedBox(height: 24),

            // T√™n nh√¢n v·∫≠t (Gi·ªØ nguy√™n)
            Text(
              figure.name,
              style: Theme.of(context)
                  .textTheme
                  .headlineMedium
                  ?.copyWith(fontWeight: FontWeight.w900, color: kTitleTextColor),
            ),
            const SizedBox(height: 8),

            // ‚úÖ HI·ªÇN TH·ªä: Ng√†y sinh - Ng√†y m·∫•t (ƒê√£ ƒë·ªãnh d·∫°ng l·∫°i)
            if (formattedLifeSpan.isNotEmpty)
              Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Icon(Icons.calendar_month, size: 20, color: kPrimaryColor), // Icon L·ªãch/Tu·ªïi th·ªç
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      formattedLifeSpan, // HI·ªÇN TH·ªä C·∫¢ HAI NG√ÄY ƒê√É FORMAT: 13/03/1884 - 04/04/1978
                      style: Theme.of(context)
                          .textTheme
                          .titleSmall
                          ?.copyWith(color: kAccentColor, fontWeight: FontWeight.bold), // M√†u Coral
                    ),
                  ),
                ],
              ),
            // ‚úÖ K·∫øt th√∫c ph·∫ßn hi·ªÉn th·ªã c·∫£i ti·∫øn
            const SizedBox(height: 20),

            // M√¥ t·∫£
            Text(
              figure.description ?? noDescription, // ‚úÖ D·ªãch: 'Kh√¥ng c√≥ m√¥ t·∫£ chi ti·∫øt.'
              style: Theme.of(context).textTheme.bodyLarge?.copyWith(color: kTitleTextColor),
              textAlign: TextAlign.justify,
            ),
            const SizedBox(height: 30),

            // S·ª± ki·ªán li√™n quan
            FutureBuilder<List<Map<String, dynamic>>>(
              // G·ªåI H√ÄM DB L·∫§Y S·ª∞ KI·ªÜN THEO ID NH√ÇN V·∫¨T (ƒê√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë·ªÉ lo·∫°i b·ªè tr√πng l·∫∑p)
              future: DBHelper.getEventsByFigureId(figure.figureId),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(child: CircularProgressIndicator(color: kPrimaryColor));
                } else if (snapshot.hasError) {
                  return Text('$errorLoadEvent: ${snapshot.error}', style: const TextStyle(color: Colors.red)); // ‚úÖ D·ªãch l·ªói t·∫£i
                } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
                  return Text(noRelatedEvent, style: TextStyle(color: kSubtextColor)); // ‚úÖ D·ªãch: 'Kh√¥ng c√≥ s·ª± ki·ªán li√™n quan.'
                }

                final events = snapshot.data!;
                return Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      // Ti√™u ƒë·ªÅ s·ª≠ d·ª•ng s·ªë l∆∞·ª£ng s·ª± ki·ªán ƒê√É L·ªåC DUY NH·∫§T
                      '$eventRelated (${events.length}):', // ‚úÖ D·ªãch: 'üóì S·ª± ki·ªán li√™n quan'
                      style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: kAppBarColor),
                    ),
                    const SizedBox(height: 12),

                    ...events.map((event) {
                      DateTime? eventDate;
                      // üåü LOGIC X·ª¨ L√ù NG√ÄY TH√ÅNG ƒê√É ƒê∆Ø·ª¢C C·∫¨P NH·∫¨T ·ªû PH·∫¢N H·ªíI TR∆Ø·ªöC (Gi·ªØ nguy√™n)
                      final dateStr = event['date']?.toString().trim() ?? '';

                      if (dateStr.isNotEmpty) {
                        eventDate = DateTime.tryParse(dateStr);

                        if (eventDate == null) {
                          if (dateStr.length == 4) { // Ch·ªâ c√≥ YYYY
                            eventDate = DateTime.tryParse('$dateStr-01-01');
                          } else if (dateStr.length >= 6 && dateStr.length <= 7 && dateStr.contains('-')) {
                            try {
                              List<String> parts = dateStr.split('-');
                              if (parts.length == 2) {
                                String year = parts[0];
                                String month = parts[1].padLeft(2, '0');
                                eventDate = DateTime.tryParse('$year-$month-01');
                              }
                            } catch (_) {
                              // B·ªè qua l·ªói t√°ch chu·ªói
                            }
                          }
                        }
                      }
                      // -------------------------------------------------------------

                      return Card(
                        color: kCardColor,
                        margin: const EdgeInsets.symmetric(vertical: 6),
                        elevation: 4,
                        shadowColor: kPrimaryColor.withOpacity(0.2),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                          side: BorderSide(color: kPrimaryColor.withOpacity(0.1), width: 1),
                        ),
                        child: ListTile(

                          // üåü KH·ªêI LEADING ƒê√É ƒê∆Ø·ª¢C C·∫¨P NH·∫¨T
                          leading: SizedBox(
                            width: 50,
                            height: 50,
                            child: ClipRRect(
                              borderRadius: BorderRadius.circular(8),
                              // G·ªçi h√†m m·ªõi ƒë√£ x·ª≠ l√Ω c·∫£ M·∫°ng v√† Asset
                              child: _buildEventImageWidget(event['image_url']),
                            ),
                          ),

                          title: Text(
                            event['title'] ?? noTitle, // ‚úÖ D·ªãch: 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ'
                            style: const TextStyle(fontWeight: FontWeight.w700, color: kTitleTextColor),
                          ),
                          subtitle: Text(
                            // S·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng ng√†y theo ng√¥n ng·ªØ
                            (eventDate != null && eventDate.year > 0)
                                ? DateFormat(dateformat).format(eventDate)
                                : event['year']?.toString() ?? '',
                            style: const TextStyle(color: kSubtextColor),
                          ),
                          trailing:
                          const Icon(Icons.arrow_forward_ios, size: 16, color: kAccentColor), // Icon Coral
                          onTap: () {
                            final eventId = event['event_id'] as int?; // L·∫•y ID
                            if (eventId != null) {
                              Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (_) => EventDetailScreen(
                                    eventId: eventId, // TRUY·ªÄN ID V√ÄO
                                    userId: userId, // ‚úÖ TRUY·ªÄN userId
                                  ),
                                ),
                              );
                            }
                          },
                        ),
                      );
                    }).toList(),
                  ],
                );
              },
            )
          ],
        ),
      ),
    );
  }
}