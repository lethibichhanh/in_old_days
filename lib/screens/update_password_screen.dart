import 'package:flutter/material.dart';
import '../db/db_helper.dart';
import '../models/user_model.dart';
// import 'password_strength_generator.dart'; // (N·∫øu b·∫°n c√≥ th√™m t√≠nh nƒÉng n√†y)

class UpdatePasswordScreen extends StatefulWidget {
  const UpdatePasswordScreen({super.key});

  @override
  State<UpdatePasswordScreen> createState() => _UpdatePasswordScreenState();
}

class _UpdatePasswordScreenState extends State<UpdatePasswordScreen> {
  UserModel? _user;
  final _currentPasswordController = TextEditingController();
  final _newPasswordController = TextEditingController();
  final _confirmPasswordController = TextEditingController();

  bool _isLoading = false;
  bool _isCurrentPasswordVisible = false;
  bool _isNewPasswordVisible = false;
  bool _isConfirmPasswordVisible = false;

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();

    // L∆ØU √ù: Argument ƒë∆∞·ª£c truy·ªÅn v√†o l√† Map<String, dynamic>
    // v√† ch·ª©a 'user' l√† m·ªôt UserModel object (t·ª´ UpdateProfileScreen).
    final args = ModalRoute.of(context)?.settings.arguments as Map<String, dynamic>?;

    // Ki·ªÉm tra v√† g√°n UserModel object
    if (args != null && args['user'] is UserModel) {
      _user = args['user'] as UserModel;
    }
    // KH√îNG c·∫ßn d√πng UserModel.fromMapArguments v√¨ b·∫°n ƒë√£ truy·ªÅn object UserModel.
  }

  @override
  void dispose() {
    _currentPasswordController.dispose();
    _newPasswordController.dispose();
    _confirmPasswordController.dispose();
    super.dispose();
  }

  /// üîπ H√†m c·∫≠p nh·∫≠t m·∫≠t kh·∫©u
  Future<void> _updatePassword() async {
    // ƒê·∫£m b·∫£o user v√† id t·ªìn t·∫°i
    if (_user == null || _user!.id == null) {
      _showSnackBar("‚ùå Th√¥ng tin ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá.");
      return;
    }

    final currentPassword = _currentPasswordController.text;
    final newPassword = _newPasswordController.text;
    final confirmPassword = _confirmPasswordController.text;

    // 1. Ki·ªÉm tra r·ªóng v√† ƒë·ªô d√†i
    if (currentPassword.isEmpty || newPassword.isEmpty || confirmPassword.isEmpty) {
      _showSnackBar("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß 3 tr∆∞·ªùng m·∫≠t kh·∫©u.");
      return;
    }
    if (newPassword.length < 6) {
      _showSnackBar("‚ùå M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.");
      return;
    }
    if (newPassword != confirmPassword) {
      _showSnackBar("‚ùå M·∫≠t kh·∫©u m·ªõi v√† X√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp.");
      return;
    }

    // 2. Ki·ªÉm tra m·∫≠t kh·∫©u hi·ªán t·∫°i c√≥ ƒë√∫ng kh√¥ng
    // üí° KH·∫ÆC PH·ª§C L·ªñI: S·ª≠ d·ª•ng tr∆∞·ªùng passwordHash.
    // L∆ØU √ù QUAN TR·ªåNG: ƒê√¢y l√† so s√°nh **PlainText** v·ªõi **Hash**.
    // Trong ·ª©ng d·ª•ng th·ª±c t·∫ø, b·∫°n PH·∫¢I HASH 'currentPassword'
    // v√† so s√°nh chu·ªói hash ƒë√≥ v·ªõi '_user!.passwordHash'.
    if (currentPassword != _user!.passwordHash) {
      // Gi·∫£ ƒë·ªãnh ƒë∆°n gi·∫£n: n·∫øu _user!.passwordHash l√† chu·ªói ƒë√£ ƒë∆∞·ª£c hash,
      // th√¨ so s√°nh n√†y s·∫Ω LU√îN SAI tr·ª´ khi b·∫°n hash 'currentPassword' tr∆∞·ªõc.
      // D√πng logic sau ƒë·ªÉ so s√°nh hash b·∫£o m·∫≠t:
      // if (!await Hasher.verify(currentPassword, _user!.passwordHash))

      // T·∫°m th·ªùi, t√¥i gi·ªØ logic ƒë∆°n gi·∫£n ƒë·ªÉ tr√°nh l·ªói bi√™n d·ªãch:
      if (currentPassword != _user!.passwordHash) {
        _showSnackBar("‚ùå M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng.");
        return;
      }
    }


    setState(() => _isLoading = true);

    try {
      // ‚úÖ Hash m·∫≠t kh·∫©u m·ªõi tr∆∞·ªõc khi l∆∞u v√†o DB!
      // Gi·∫£ ƒë·ªãnh b·∫°n c√≥ m·ªôt h√†m hash. V√≠ d·ª•: String hashedNewPassword = await Hasher.hash(newPassword);
      String hashedNewPassword = newPassword; // ‚ö†Ô∏è Thay b·∫±ng Hashing th·ª±c t·∫ø!

      // ‚úÖ T·∫°o ƒë·ªëi t∆∞·ª£ng m·ªõi v·ªõi HASH m·∫≠t kh·∫©u ƒë√£ c·∫≠p nh·∫≠t
      final updatedUser = _user!.copyWith(
        passwordHash: hashedNewPassword, // ‚úÖ D√πng ƒë√∫ng t√™n tr∆∞·ªùng 'passwordHash'
      );

      // ‚úÖ C·∫≠p nh·∫≠t DB
      final rows = await DBHelper.updateUser(updatedUser);

      if (rows > 0) {
        if (mounted) {
          _showSnackBar("‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!");
          // üëâ Tr·∫£ UserModel m·ªõi v·ªÅ ProfileScreen
          Navigator.pop(context, updatedUser);
        }
      } else {
        _showSnackBar("‚ö†Ô∏è Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë∆∞·ª£c l∆∞u.");
      }
    } catch (e) {
      debugPrint("‚ùå L·ªói c·∫≠p nh·∫≠t m·∫≠t kh·∫©u: $e");
      _showSnackBar("‚ùå L·ªói c·∫≠p nh·∫≠t: $e");
    } finally {
      if (mounted) setState(() => _isLoading = false);
    }
  }

  void _showSnackBar(String message) {
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(message)),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    if (_user == null) {
      return const Scaffold(
        body: Center(child: Text("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng.")),
      );
    }

    return Scaffold(
      appBar: AppBar(
        title: const Text("ƒê·ªïi m·∫≠t kh·∫©u"),
        backgroundColor: Colors.indigo,
        foregroundColor: Colors.white,
      ),
      body: Stack(
        children: [
          Container(
            decoration: const BoxDecoration(
              gradient: LinearGradient(
                colors: [Color(0xFF6D83F2), Color(0xFF8EC5FC)],
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
              ),
            ),
          ),
          SingleChildScrollView(
            padding: const EdgeInsets.all(20),
            child: Card(
              elevation: 10,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(24),
              ),
              child: Padding(
                padding: const EdgeInsets.all(24),
                child: Column(
                  children: [
                    const Icon(Icons.lock_reset, size: 80, color: Colors.indigo),
                    const SizedBox(height: 24),

                    // M·∫≠t kh·∫©u hi·ªán t·∫°i
                    _buildPasswordField(
                      controller: _currentPasswordController,
                      label: "M·∫≠t kh·∫©u hi·ªán t·∫°i",
                      icon: Icons.lock_outline,
                      isVisible: _isCurrentPasswordVisible,
                      onToggleVisibility: () {
                        setState(() => _isCurrentPasswordVisible = !_isCurrentPasswordVisible);
                      },
                    ),
                    const SizedBox(height: 16),

                    // M·∫≠t kh·∫©u m·ªõi
                    _buildPasswordField(
                      controller: _newPasswordController,
                      label: "M·∫≠t kh·∫©u m·ªõi",
                      icon: Icons.lock,
                      isVisible: _isNewPasswordVisible,
                      onToggleVisibility: () {
                        setState(() => _isNewPasswordVisible = !_isNewPasswordVisible);
                      },
                    ),
                    // TODO: Th√™m Password Strength Bar ·ªü ƒë√¢y theo h√¨nh m·∫´u
                    const SizedBox(height: 16),

                    // X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi
                    _buildPasswordField(
                      controller: _confirmPasswordController,
                      label: "X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi",
                      icon: Icons.check_circle_outline,
                      isVisible: _isConfirmPasswordVisible,
                      onToggleVisibility: () {
                        setState(() => _isConfirmPasswordVisible = !_isConfirmPasswordVisible);
                      },
                    ),

                    const SizedBox(height: 30),

                    // N√∫t ƒê·ªïi M·∫≠t Kh·∫©u
                    SizedBox(
                      width: double.infinity,
                      child: ElevatedButton.icon(
                        onPressed: _isLoading ? null : _updatePassword,
                        icon: _isLoading
                            ? const SizedBox(
                          width: 22, height: 22,
                          child: CircularProgressIndicator(color: Colors.white, strokeWidth: 2),
                        )
                            : const Icon(Icons.security_update),
                        label: const Text(
                          "ƒê·ªïi M·∫≠t Kh·∫©u",
                          style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                        ),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.indigo,
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(vertical: 14),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(16),
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
          if (_isLoading)
            Container(
              color: Colors.black.withOpacity(0.3),
              child: const Center(child: CircularProgressIndicator(color: Colors.white)),
            ),
        ],
      ),
    );
  }

  // Widget ri√™ng ƒë·ªÉ x√¢y d·ª±ng tr∆∞·ªùng nh·∫≠p m·∫≠t kh·∫©u (c√≥ th·ªÉ ·∫©n/hi·ªán)
  Widget _buildPasswordField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    required bool isVisible,
    required VoidCallback onToggleVisibility,
  }) {
    return TextField(
      controller: controller,
      obscureText: !isVisible,
      keyboardType: TextInputType.visiblePassword,
      decoration: InputDecoration(
        labelText: label,
        prefixIcon: Icon(icon, color: Colors.indigo),
        suffixIcon: IconButton(
          icon: Icon(
            isVisible ? Icons.visibility : Icons.visibility_off,
            color: Colors.grey,
          ),
          onPressed: onToggleVisibility,
        ),
        filled: true,
        fillColor: Colors.white,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(16),
          borderSide: BorderSide.none,
        ),
      ),
    );
  }
}