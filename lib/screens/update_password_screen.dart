// Trong lib/screens/update_password_screen.dart (code m·ªõi)
import 'dart:math';
import 'package:flutter/material.dart';
import '../db/db_helper.dart';
import '../models/user_model.dart';

class UpdatePasswordScreen extends StatefulWidget {
  const UpdatePasswordScreen({super.key});

  @override
  State<UpdatePasswordScreen> createState() => _UpdatePasswordScreenState();
}

class _UpdatePasswordScreenState extends State<UpdatePasswordScreen> {
  UserModel? _user;
  int? _userIdFromArgs; // Bi·∫øn ƒë·ªÉ l∆∞u ID ƒë∆∞·ª£c truy·ªÅn v√†o

  final _currentPasswordController = TextEditingController();
  final _newPasswordController = TextEditingController();
  final _confirmPasswordController = TextEditingController();

  bool _isLoading = true; // B·∫Øt ƒë·∫ßu loading
  bool _isCurrentPasswordVisible = false;
  bool _isNewPasswordVisible = false;
  bool _isConfirmPasswordVisible = false;

  String _passwordStrength = "R·∫•t y·∫øu (0/100)";
  Color _strengthColor = Colors.red;

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();

    if (_user == null && _userIdFromArgs == null) {
      final args = ModalRoute.of(context)?.settings.arguments;
      debugPrint("üì¶ Arguments nh·∫≠n ƒë∆∞·ª£c: $args");

      // 1. L·∫•y ID t·ª´ Arguments (D√π l√† int tr·ª±c ti·∫øp hay Map)
      if (args is int) {
        _userIdFromArgs = args;
      } else if (args is UserModel) {
        _userIdFromArgs = args.id;
      } else if (args is Map<String, dynamic>) {
        // N·∫øu ProfileScreen truy·ªÅn {'userId': id} nh∆∞ code c≈©
        _userIdFromArgs = args['userId'] is int ? args['userId'] : int.tryParse(args['userId']?.toString() ?? '');
      }

      // 2. N·∫øu c√≥ ID, ti·∫øn h√†nh t·∫£i user t·ª´ DB
      if (_userIdFromArgs != null) {
        _loadUserById(_userIdFromArgs!);
      } else {
        // 3. Fallback: N·∫øu kh√¥ng c√≥ ID, t·∫£i user ƒë·∫ßu ti√™n (√çt tin c·∫≠y h∆°n)
        debugPrint("‚ùå Kh√¥ng t√¨m th·∫•y ID t·ª´ arguments, ƒëang th·ª≠ l·∫•y t·ª´ DB...");
        _loadUserFromDatabase();
      }
    }
  }

  Future<void> _loadUserById(int id) async {
    try {
      final user = await DBHelper.getUserById(id);
      if (mounted) {
        setState(() {
          _user = user;
          _isLoading = false;
        });
        if (user != null) {
          debugPrint("‚úÖ ƒê√£ n·∫°p user theo ID: ${user.email}");
        } else {
          debugPrint("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y user v·ªõi ID: $id");
          _showSnackBar("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n ƒë·ªÉ ƒë·ªïi m·∫≠t kh·∫©u.");
        }
      }
    } catch (e) {
      debugPrint("‚ùå L·ªói t·∫£i user theo ID: $e");
      if (mounted) setState(() => _isLoading = false);
    }
  }

  // H√†m Fallback (ch·ªâ d√πng khi kh√¥ng c√≥ ID)
  Future<void> _loadUserFromDatabase() async {
    try {
      final users = await DBHelper.getAllUsers();
      if (mounted) {
        setState(() {
          _user = users.isNotEmpty ? users.first : null;
          _isLoading = false;
        });
        if (users.isNotEmpty) {
          debugPrint("‚úÖ ƒê√£ n·∫°p user t·ª´ DB (Fallback): ${_user!.email}");
        } else {
          debugPrint("‚ö†Ô∏è Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o trong DB!");
          _showSnackBar("‚ö†Ô∏è Kh√¥ng c√≥ t√†i kho·∫£n n√†o ƒë∆∞·ª£c ƒëƒÉng nh·∫≠p.");
        }
      }
    } catch (e) {
      debugPrint("‚ùå L·ªói t·∫£i user t·ª´ DB: $e");
      if (mounted) setState(() => _isLoading = false);
    }
  }

  @override
  void dispose() {
    _currentPasswordController.dispose();
    _newPasswordController.dispose();
    _confirmPasswordController.dispose();
    super.dispose();
  }

  // ================== üîê T·∫†O M·∫¨T KH·∫®U NG·∫™U NHI√äN ==================
  void _generateRandomPassword() {
    const String chars =
        'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#\$%^&*()_-+=<>?';
    final rand = Random.secure();
    final password =
    List.generate(12, (index) => chars[rand.nextInt(chars.length)]).join();
    _newPasswordController.text = password;
    _confirmPasswordController.text = password;
    _checkPasswordStrength(password);
    _showSnackBar("üîë ƒê√£ t·∫°o m·∫≠t kh·∫©u ng·∫´u nhi√™n!");
  }

  // ================== üìä KI·ªÇM TRA ƒê·ªò M·∫†NH M·∫¨T KH·∫®U ==================
  void _checkPasswordStrength(String password) {
    // ... (Gi·ªØ nguy√™n logic ki·ªÉm tra ƒë·ªô m·∫°nh)
    int score = 0;

    if (password.length >= 6) score += 25;
    if (password.length >= 10) score += 25;
    if (RegExp(r'[A-Z]').hasMatch(password)) score += 15;
    if (RegExp(r'[0-9]').hasMatch(password)) score += 15;
    if (RegExp(r'[!@#\$%^&*(),.?":{}|<>]').hasMatch(password)) score += 20;

    if (score <= 30) {
      _passwordStrength = "R·∫•t y·∫øu ($score/100)";
      _strengthColor = Colors.red;
    } else if (score <= 60) {
      _passwordStrength = "Trung b√¨nh ($score/100)";
      _strengthColor = Colors.orange;
    } else {
      _passwordStrength = "M·∫°nh ($score/100)";
      _strengthColor = Colors.green;
    }

    setState(() {});
  }

  // ================== üß≠ X·ª¨ L√ù C·∫¨P NH·∫¨T M·∫¨T KH·∫®U ==================
  Future<void> _updatePassword() async {
    // Logic n√†y ƒë∆∞·ª£c gi·ªØ nguy√™n, n√≥ s·∫Ω ki·ªÉm tra _user sau khi ƒë√£ ƒë∆∞·ª£c t·∫£i
    if (_user == null || _user!.id == null) {
      _showSnackBar("‚ùå Th√¥ng tin ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá.");
      return;
    }

    final currentPassword = _currentPasswordController.text.trim();
    final newPassword = _newPasswordController.text.trim();
    final confirmPassword = _confirmPasswordController.text.trim();

    if (currentPassword.isEmpty ||
        newPassword.isEmpty ||
        confirmPassword.isEmpty) {
      _showSnackBar("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin.");
      return;
    }

    if (newPassword.length < 6) {
      _showSnackBar("‚ùå M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.");
      return;
    }

    if (newPassword != confirmPassword) {
      _showSnackBar("‚ùå M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n kh√¥ng kh·ªõp.");
      return;
    }

    // ‚ö†Ô∏è So s√°nh password hi·ªán t·∫°i v·ªõi hash trong DB
    final currentHash = _user!.passwordHash;
    if (currentHash.isEmpty || currentPassword != currentHash) {
      _showSnackBar("‚ùå M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng ho·∫∑c ch∆∞a ƒë∆∞·ª£c ƒë·∫∑t.");
      return;
    }

    setState(() => _isLoading = true);

    try {
      final updatedUser = _user!.copyWith(
        passwordHash: newPassword,
        updatedAt: DateTime.now().toIso8601String(),
      );

      final result = await DBHelper.updateUser(updatedUser);

      if (result > 0) {
        _showSnackBar("‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!");
        Navigator.pop(context, updatedUser);
      } else {
        _showSnackBar("‚ö†Ô∏è Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë∆∞·ª£c l∆∞u.");
      }
    } catch (e) {
      debugPrint("‚ùå L·ªói c·∫≠p nh·∫≠t m·∫≠t kh·∫©u: $e");
      _showSnackBar("‚ùå L·ªói c·∫≠p nh·∫≠t: $e");
    } finally {
      if (mounted) setState(() => _isLoading = false);
    }
  }

  void _showSnackBar(String message) {
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(message), behavior: SnackBarBehavior.floating),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("ƒê·ªïi m·∫≠t kh·∫©u"),
        backgroundColor: Colors.indigo,
        foregroundColor: Colors.white,
      ),
      // Thay ƒë·ªïi logic ki·ªÉm tra _user th√†nh _isLoading
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : _user == null
          ? const Center(child: Text("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng."))
          : Stack(
        children: [
          // ... (Ph·∫ßn UI Stack ƒë∆∞·ª£c gi·ªØ nguy√™n)
          Container(
            decoration: const BoxDecoration(
              gradient: LinearGradient(
                colors: [Color(0xFF6D83F2), Color(0xFF8EC5FC)],
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
              ),
            ),
          ),
          SingleChildScrollView(
            padding: const EdgeInsets.all(20),
            child: Card(
              elevation: 10,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(24),
              ),
              child: Padding(
                padding: const EdgeInsets.all(24),
                child: Column(
                  children: [
                    const Icon(Icons.lock_reset,
                        size: 80, color: Colors.indigo),
                    const SizedBox(height: 24),
                    _buildPasswordField(
                      controller: _currentPasswordController,
                      label: "M·∫≠t kh·∫©u hi·ªán t·∫°i",
                      icon: Icons.lock_outline,
                      isVisible: _isCurrentPasswordVisible,
                      onToggleVisibility: () {
                        setState(() => _isCurrentPasswordVisible =
                        !_isCurrentPasswordVisible);
                      },
                    ),
                    const SizedBox(height: 16),
                    _buildPasswordField(
                      controller: _newPasswordController,
                      label: "M·∫≠t kh·∫©u m·ªõi",
                      icon: Icons.lock,
                      isVisible: _isNewPasswordVisible,
                      onToggleVisibility: () {
                        setState(() => _isNewPasswordVisible =
                        !_isNewPasswordVisible);
                      },
                      onChanged: _checkPasswordStrength,
                    ),
                    const SizedBox(height: 8),
                    Row(
                      children: [
                        Text("ƒê·ªô m·∫°nh:",
                            style: TextStyle(color: Colors.grey[700])),
                        const SizedBox(width: 8),
                        Text(
                          _passwordStrength,
                          style: TextStyle(
                              fontWeight: FontWeight.bold,
                              color: _strengthColor),
                        ),
                        const Spacer(),
                        TextButton.icon(
                          onPressed: _generateRandomPassword,
                          icon: const Icon(Icons.refresh),
                          label: const Text("T·∫°o m·∫≠t kh·∫©u"),
                        ),
                      ],
                    ),
                    const SizedBox(height: 16),
                    _buildPasswordField(
                      controller: _confirmPasswordController,
                      label: "X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi",
                      icon: Icons.check_circle_outline,
                      isVisible: _isConfirmPasswordVisible,
                      onToggleVisibility: () {
                        setState(() => _isConfirmPasswordVisible =
                        !_isConfirmPasswordVisible);
                      },
                    ),
                    const SizedBox(height: 30),
                    SizedBox(
                      width: double.infinity,
                      child: ElevatedButton.icon(
                        onPressed:
                        _isLoading ? null : _updatePassword,
                        icon: _isLoading
                            ? const SizedBox(
                          width: 22,
                          height: 22,
                          child: CircularProgressIndicator(
                            color: Colors.white,
                            strokeWidth: 2,
                          ),
                        )
                            : const Icon(Icons.security_update),
                        label: const Text(
                          "ƒê·ªïi M·∫≠t Kh·∫©u",
                          style: TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.bold),
                        ),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.indigo,
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(
                              vertical: 14),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(16),
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
          if (_isLoading)
            Container(
              color: Colors.black.withOpacity(0.3),
              child: const Center(
                  child: CircularProgressIndicator(color: Colors.white)),
            ),
        ],
      ),
    );
  }

  Widget _buildPasswordField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    required bool isVisible,
    required VoidCallback onToggleVisibility,
    void Function(String)? onChanged,
  }) {
    return TextField(
      controller: controller,
      obscureText: !isVisible,
      keyboardType: TextInputType.visiblePassword,
      onChanged: onChanged,
      decoration: InputDecoration(
        labelText: label,
        prefixIcon: Icon(icon, color: Colors.indigo),
        suffixIcon: IconButton(
          icon: Icon(
            isVisible ? Icons.visibility : Icons.visibility_off,
            color: Colors.grey,
          ),
          onPressed: onToggleVisibility,
        ),
        filled: true,
        fillColor: Colors.white,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(16),
          borderSide: BorderSide.none,
        ),
      ),
    );
  }
}